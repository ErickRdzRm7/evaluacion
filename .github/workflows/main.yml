name: CI/CD Pipeline - Frontend & Infra

on:
  push:
    branches: [dev, staging, master]
  pull_request:
    branches: [main]
  workflow_dispatch:
    
permissions:
  id-token: write
  contents: read
    
env:
  NODE_VERSION: '24.3.0'
  APP_NAME: evaluacion
  DEPLOY_ENV: dev

jobs:
  ci-build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v24.3.0
          cache: 'npm'
          cache-dependency-path: |
            ./package-lock.json

      - name: Install Node.js 
        run: make install
    
      - name: Install Node.js dependencies
        run: make install-ci        
      - name: Lint 
        run: make Lint

      - name: Run Unit Tests
        run: make test

  cd-deploy-infra:
    name: Deploy Infrastructure
    needs: ci-build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'


    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.REGION }}
      ENVIRONMENT: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3 
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: make terraform-init

      - name: Select Terraform workspace
        run: |
            if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
              terraform workspace select "dev" || terraform workspace new "dev"
            elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
              terraform workspace select "staging" || terraform workspace new "staging"
            elif [[ "${GITHUB_REF_NAME}" == "master" ]]; then
              terraform workspace select "prod" || terraform workspace new "prod"
            fi
        working-directory: ./infra
    

      - name: Terraform Validate
        run: make terraform-validate

      - name: Terraform Plan
        run: make terraform-plan
        env:
          TF_VAR_environment: dev


      - name: Terraform Apply
        run:  make terraform-apply
        env:

          TF_VAR_environment: dev

          TF_VAR_environment: dev

  cd-deploy-app:
    name: Deploy Application
    needs: cd-deploy-infra
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER_NAME:  ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name:  Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.REGION }}

      - name:  Authenticate to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

        

      - name:  Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '24.3.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Frontend dependencies
        run: npm install

      - name: Set variables
        run: |
         echo "ECR_REGISTRY=$(aws ecr describe-repositories --repository-names app-frontend --query "repositories[0].repositoryUri" | cut -d/ -f1)" >> $GITHUB_ENV
         echo "REGION=us-east-2" >> $GITHUB_ENV

      - name: üê≥ Build & Push Frontend Docker Image
        run: |
            make docker-build-push-frontend VERSION=${{ needs.ci-build-test.outputs.version }} \
            IMAGE_TAG=${{ github.ref_name }}-${{ github.sha }} \
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }} \
            ECR_REPO=${{ secrets.ECR_REPO }} \
            ACCOUNT_ID=${{ secrets.ACCOUNT_ID }} \
            REGION=${{ secrets.REGION }} \
            make docker-build-push-frontend
            REGION=${{ secrets.REGION }}

      - name: üöÄ Update ECS Service
        run: |
          aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --force-new-deployment \
          --region $REGION
        
  