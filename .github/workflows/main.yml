
name: CI/CD Pipeline - Frontend & Infra

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - development
      - staging
  issue_comment:
    types:
      - created
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
    
env:
  NODE_VERSION: '24.3.0'
  APP_NAME: evaluacion
  DEPLOY_ENV: dev
  AWS_REGION: us-east-2

jobs:
  ci-build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v24.3.0
          cache: 'npm'
          cache-dependency-path: |
            ./package-lock.json

      - name: Install Node.js dependencies
        run: make install-ci        
      - name: Lint 
        run: make Lint

      - name: Run Unit Tests
        run: make test

      - name: Bump Version
        if: github.ref == 'refs/heads/main'
        run: |
          npm version patch --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ðŸ“¦ Nueva versiÃ³n: $VERSION"
        
  atlantis:
    name: Atlantis
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'pull_request') ||  (github.ref == 'refs/heads/main' && github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis'))
    env:
      ATLANTIS_GH_TOKEN: ${{ secrets.ATLANTIS_GH_TOKEN }}
      ATLANTIS_GH_USER: ErickRdzRm7
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          
      - name: Run Atlantis commands
        run: |
          if [[ "${{ github.event.comment.body }}" =~ "atlantis plan" ]]; then
            docker run --rm \
              -e ATLANTIS_GH_TOKEN=$ATLANTIS_GH_TOKEN \
              -e ATLANTIS_GH_USER=$ATLANTIS_GH_USER \
              -e TF_VAR_access_key=$TF_VAR_access_key \
              -e TF_VAR_secret_key=$TF_VAR_secret_key \
              -e AWS_REGION=$AWS_REGION \
              -v $(pwd):/repos \
              ghcr.io/runatlantis/atlantis:latest \
              plan
          elif [[ "${{ github.event.comment.body }}" =~ "atlantis apply" ]]; then
            docker run --rm \
              -e ATLANTIS_GH_TOKEN=$ATLANTIS_GH_TOKEN \
              -e ATLANTIS_GH_USER=$ATLANTIS_GH_USER \
              -e TF_VAR_access_key=$TF_VAR_access_key \
              -e TF_VAR_secret_key=$TF_VAR_secret_key \
              -e AWS_REGION=$AWS_REGION \
              -v $(pwd):/repos \
              ghcr.io/runatlantis/atlantis:latest \
              apply
          else
            echo "Comando de Atlantis no reconocido. Por favor usa 'atlantis plan' o 'atlantis apply'."
          fi

  cd-deploy-app:
    name: Deploy Application
    needs: ci-build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      ECS_CLUSTER_NAME:  ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
    steps:
      - name: ðŸ“¦ Checkout code
        uses: actions/checkout@v4

      - name:  Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.REGION }}

      - name:  Authenticate to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name:  Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '24.3.0'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Frontend dependencies
        run: npm install

      - name: Set variables
        run: |
         echo "ECR_REGISTRY=$(aws ecr describe-repositories --repository-names app-frontend --query "repositories[0].repositoryUri" | cut -d/ -f1)" >> $GITHUB_ENV
      - name: Set variables
        run: |
          echo "ECR_REGISTRY=$(aws ecr describe-repositories --repository-names app-frontend --query "repositories[0].repositoryUri" | cut -d/ -f1)" >> $GITHUB_ENV
          echo "REGION=us-east-2" >> $GITHUB_ENV
            make docker-build-push-frontend \
            IMAGE_TAG=${{ github.ref_name }}-${{ github.sha }} \
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }} \
            ECR_REPO=${{ secrets.ECR_REPO }} \
            ACCOUNT_ID=${{ secrets.ACCOUNT_ID }} \
            REGION=${{ secrets.REGION }}

      - name: ðŸš€ Update ECS Service
        run: |
          aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --force-new-deployment \
          --region $REGION
