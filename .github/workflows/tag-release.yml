name: Tag Release and Deploy to ECR

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: app-frontend

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Bump version and push tag
        id: version
        run: |
          NEW_VERSION=$(npm version patch --no-git-tag-version | sed 's/v//')
          git add package.json
          git commit -m "chore: release v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Version ${NEW_VERSION}"
          git push origin main --follow-tags
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

  deploy-to-ecr:
    needs: bump-version
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        run: |
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${ECR_REGISTRY}
      
      - name: Build, tag and push
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          # Obtener short SHA y sanitizar branch name
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          SANITIZED_BRANCH=$(echo "${BRANCH_NAME}" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          
          # Construir y subir imágenes
          docker build \
            -t ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${{ needs.bump-version.outputs.new_version }} \
            -t ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest \
            -t ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${SANITIZED_BRANCH} \
            -t ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${SHORT_SHA} .
          
          docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }} --all-tags
          
          echo "===================================="
          echo "Imágenes subidas exitosamente:"
          echo "Registry: ${ECR_REGISTRY}"
          echo "Repositorio: ${{ env.ECR_REPOSITORY }}"
          echo "Tags:"
          echo "- ${{ needs.bump-version.outputs.new_version }}"
          echo "- latest"
          echo "- ${SANITIZED_BRANCH}"
          echo "- ${SHORT_SHA}"
          echo "===================================="