name: Tag Release and Deploy to ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write  
  contents: write
  packages: write
  deployments: write 

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Bump version and push tag
        id: version
        run: |
          NEW_VERSION=$(npm version patch --no-git-tag-version | sed 's/v//')
          git add package.json
          git commit -m "chore: release v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Version ${NEW_VERSION}"
          git push origin main --follow-tags
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

  deploy-to-ecr:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3 
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-2 
      
      - name: Login to Amazon ECR
        run: |
          ECR_REGISTRY=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          aws ecr get-login-password --region ${{ secrets.REGION }} | \
          docker login --username AWS --password-stdin ${ECR_REGISTRY}
      
      - name: Build, tag and push
        env:
          BRANCH_NAME: ${{ secrets.BRANCH_NAME || 'main' }}
        run: |
          # Get short SHA and sanitize branch name
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
          SANITIZED_BRANCH=$(echo "${BRANCH_NAME}" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          
          # Build and tag images
          docker build \
            -t ${ECR_REGISTRY}/${{ secrets.ECR_REPO }}:${{ needs.bump-version.outputs.new_version }} \
            -t ${ECR_REGISTRY}/${{ secrets.ECR_REPO }}:latest \
            -t ${ECR_REGISTRY}/${{ secrets.ECR_REPO }}:${SANITIZED_BRANCH} \
            -t ${ECR_REGISTRY}/${{ secrets.ECR_REPO }}:${SHORT_SHA} .
          
          # Push all tags
          docker push ${ECR_REGISTRY}/${{ secrets.ECR_REPO }} --all-tags
          
          echo "===================================="
          echo "Images pushed to ECR:"
          echo "- Version: ${{ needs.bump-version.outputs.new_version }}"
          echo "- Latest"
          echo "- Branch: ${SANITIZED_BRANCH}"
          echo "- Commit: ${SHORT_SHA}"
          echo "===================================="
      
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment \
            --region ${{ secrets.REGION }}
            
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.sha }}
          task: deploy

      - name: Mark deployment as successful
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
